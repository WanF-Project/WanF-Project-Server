plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.0.4'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.google.cloud.tools.jib' version '3.3.1'
}

group = 'com.capstone'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

jib {
    to {
        image = 'hongyoung/wanf-server'
        tags = ['0.4']
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.github.napstr:logback-discord-appender:1.0.0'
    implementation 'org.springdoc:springdoc-openapi-starter-common:2.0.2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.rest-assured:rest-assured:5.3.0'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'com.h2database:h2'
}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    // jacoco 버전
    toolVersion = '0.8.7'
}

test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'

    jacoco {
        excludes += ["com/capstone/wanf/error",
                     "com/capstone/wanf/config/**",
                     "com/capstone/wanf/common/**",
                     "com/capstone/wanf/**/dto/**",
                     "com/capstone/wanf/auth/**"]
    }
}


bootBuildImage {
    imageName = System.getenv("DOCKER_USERNAME") + "/wanf-api"
    publish = true
    docker {
        publishRegistry {
            username = System.getenv("DOCKER_USERNAME")
            password = System.getenv("DOCKER_PASSWORD")
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.enabled true

        xml.destination file("${buildDir}/jacoco/index.xml")
        csv.destination file("${buildDir}/jacoco/index.csv")
        html.destination file("${buildDir}/jacoco/index.html")
    }

    finalizedBy 'jacocoTestCoverageVerification'

    def Qdomains = []
    for(qPattern in "**/QA" .. "**/QZ"){
        Qdomains.add(qPattern+"*")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ["com/capstone/wanf/error",
                              "com/capstone/wanf/config/**",
                              "com/capstone/wanf/common/**",
                              "com/capstone/wanf/**/dto/**"]+ Qdomains)
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            // 각 클래스
            element = 'CLASS'


            // 분기문 커버리지
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0
            }

            // 라인 커버리지
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }

            // 코드에서 사용하는 메소드 중, 테스트가 실행된 메소드의 비율
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0
            }

            excludes = [
                    '**/*Application*',
                    '**/*dto*',
                    '**/*Response*',
                    '**/*config*',
                    '**/*ErrorCode*',
                    "*Q*", // querydsl
            ]
        }

        rule {
            element = 'METHOD'

            // 최대 method 라인 수
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 200
            }
        }
    }
}